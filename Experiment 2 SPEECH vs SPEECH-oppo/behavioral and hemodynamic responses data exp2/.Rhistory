ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
facet_grid(. ~ roi_code)
# HbR
ggplot(df_poly_win1_sum_HbR)+
aes(x = time, y = fnirs_data, color = masker_configuration)+
geom_ribbon(aes(ymin = fnirs_data - fnirs_data.se,
ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
facet_grid(. ~ roi_code)
# model goodness of fit measured in R2
model_fit_r2 = cor(full_data$fnirs_data, full_data$predicted)^2
print(model_fit_r2)
#########################################################################################
## calculate the percetage of reference channel attributed to the
## total activation levels in the LMEM as measured using area under the curve (auc)
#########################################################################################
df_auc <- full_data %>%
ungroup() %>%
group_by(time) %>%
summarise(num_listeners = n(),
fnirs_data.se = sd(fnirs_data, na.rm = TRUE)/sqrt(n()),
fnirs_data = round(mean(fnirs_data, na.rm = TRUE),4),
predicted = mean(predicted),
fnirs_data_RC_HbO = mean(fnirs_data_RC_HbO),
fnirs_data_RC_HbR = mean(fnirs_data_RC_HbR),
fnirs_data_RC = (fnirs_data_RC_HbO +fnirs_data_RC_HbR)/2)
time_axis = abs(df_auc$time)
recording = abs(df_auc$fnirs_data)
LMEM = abs(df_auc$predicted)
RC = abs(df_auc$fnirs_data_RC)
id = order(time_axis)
AUC_LMEM= sum(diff(time_axis[id])*rollmean(LMEM[id],2))
AUC_RC = sum(diff(time_axis[id])*rollmean(RC[id],2))
AUC_percentage = AUC_RC/AUC_LMEM
print(AUC_percentage)
#########################################################################################
## build data for figure 3
## remove reference channel data and find HbO peak during task block
## saved in csv for plot using matlab later
#########################################################################################
full_data_S_RC <- full_data
# remove reference from prediction
full_data_S_RC$predicted <- full_data_S_RC$predicted - full_data$fnirs_data_RC_HbO *  coefs_1$Estimate[7]
full_data_S_RC$predicted <- full_data_S_RC$predicted - full_data$fnirs_data_RC_HbR * coefs_1$Estimate[8]
# calcualte correlation between Speech detection sensitivity (d') and Peak of HbO response
# summarize first
d_prime_vs_HbO_peak <- full_data_S_RC%>%
ungroup() %>%
group_by(SID, hemisphere, cortical_structure, roi_code, masker_configuration, d_prime, HbO_HbR, time) %>%
summarise(num_listeners = n(),
fnirs_data.se = sd(fnirs_data, na.rm = TRUE)/sqrt(n()),
fnirs_data = round(mean(fnirs_data, na.rm = TRUE),4),
predicted = mean(predicted))
## loop through all 14 subjets and record max
##roi_code 1: right STG; 2: left STG; 3: right cIFS; 4: left cIFS
## masker_configuration 1: speech in speech; 2: speech in speechoppo
## masker_configuration 1 speech, HbO, 4 region
# right STG
peak_R_STG_speech_HbO <- vector()
d_prime_speech_HbO <- vector()
R_STG_speech_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 3, ]
peak_R_STG_speech_HbO <- c(peak_R_STG_speech_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speech_HbO <- c(d_prime_speech_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
R_STG_speech_HbO <- rbind(R_STG_speech_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# left STG
peak_L_STG_speech_HbO <- vector()
d_prime_speech_HbO <- vector()
L_STG_speech_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 4, ]
peak_L_STG_speech_HbO <- c(peak_L_STG_speech_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speech_HbO <- c(d_prime_speech_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
L_STG_speech_HbO <- rbind(L_STG_speech_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# right cIFS
peak_R_cIFS_speech_HbO <- vector()
d_prime_speech_HbO <- vector()
R_cIFS_speech_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 1, ]
peak_R_cIFS_speech_HbO <- c(peak_R_cIFS_speech_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speech_HbO <- c(d_prime_speech_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
R_cIFS_speech_HbO <- rbind(R_cIFS_speech_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# left cIFS
peak_L_cIFS_speech_HbO <- vector()
d_prime_speech_HbO <- vector()
L_cIFS_speech_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 2, ]
peak_L_cIFS_speech_HbO <- c(peak_L_cIFS_speech_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speech_HbO<- c(d_prime_speech_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
L_cIFS_speech_HbO <- rbind(L_cIFS_speech_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# masker_configuration 2 speech, HbO, 4 region
# right STG
peak_R_STG_speechoppo_HbO <- vector()
d_prime_speechoppo_HbO <- vector()
R_STG_speechoppo_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 3, ]
peak_R_STG_speechoppo_HbO <- c(peak_R_STG_speechoppo_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speechoppo_HbO <- c(d_prime_speechoppo_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
R_STG_speechoppo_HbO <- rbind(R_STG_speechoppo_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# left STG
peak_L_STG_speechoppo_HbO <- vector()
d_prime_speechoppo_HbO <- vector()
L_STG_speechoppo_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 4, ]
peak_L_STG_speechoppo_HbO <- c(peak_L_STG_speechoppo_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speechoppo_HbO <- c(d_prime_speechoppo_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
L_STG_speechoppo_HbO <- rbind(L_STG_speechoppo_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# right cIFS
peak_R_cIFS_speechoppo_HbO <- vector()
d_prime_speechoppo_HbO <- vector()
R_cIFS_speechoppo_HbO <-vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 1, ]
peak_R_cIFS_speechoppo_HbO <- c(peak_R_cIFS_speechoppo_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speechoppo_HbO <- c(d_prime_speechoppo_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
R_cIFS_speechoppo_HbO <- rbind(R_cIFS_speechoppo_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# left cIFS
peak_L_cIFS_speechoppo_HbO <- vector()
d_prime_speechoppo_HbO <- vector()
L_cIFS_speechoppo_HbO <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbO <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 1 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 2, ]
peak_L_cIFS_speechoppo_HbO <- c(peak_L_cIFS_speechoppo_HbO, abs(max(d_prime_vs_HbO_peak_HbO$predicted)))
d_prime_speechoppo_HbO <- c(d_prime_speechoppo_HbO , d_prime_vs_HbO_peak_HbO$d_prime[1])
L_cIFS_speechoppo_HbO <- rbind(L_cIFS_speechoppo_HbO, d_prime_vs_HbO_peak_HbO$predicted)
}
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# masker_configuration 1 speech, HbR, 4 region
# right STG
peak_R_STG_speech_HbR <- vector()
d_prime_speech_HbR<- vector()
R_STG_speech_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 3, ]
peak_R_STG_speech_HbR <- c(peak_R_STG_speech_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speech_HbR <- c(d_prime_speech_HbR, d_prime_vs_HbO_peak_HbR$d_prime[1])
R_STG_speech_HbR <- rbind(R_STG_speech_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# left STG
peak_L_STG_speech_HbR <- vector()
d_prime_speech_HbR <- vector
L_STG_speech_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 4, ]
peak_L_STG_speech_HbR <- c(peak_L_STG_speech_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speech_HbR <- c(d_prime_speech_HbR, d_prime_vs_HbO_peak_HbR$d_prime[1])
L_STG_speech_HbR <- rbind(L_STG_speech_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# right cIFS
peak_R_cIFS_speech_HbR <- vector()
d_prime_speech_HbR <- vector()
R_cIFS_speech_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 1, ]
peak_R_cIFS_speech_HbR <- c(peak_R_cIFS_speech_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speech_HbR <- c(d_prime_speech_HbR , d_prime_vs_HbO_peak_HbR$d_prime[1])
R_cIFS_speech_HbR <- rbind(R_cIFS_speech_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# left cIFS
peak_L_cIFS_speech_HbR <- vector()
d_prime_speech_HbR <- vector()
L_cIFS_speech_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 1 &
d_prime_vs_HbO_peak$roi_code == 2, ]
peak_L_cIFS_speech_HbR <- c(peak_L_cIFS_speech_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speech_HbR <- c(d_prime_speech_HbR , d_prime_vs_HbO_peak_HbR$d_prime[1])
L_cIFS_speech_HbR <- rbind(L_cIFS_speech_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# masker_configuration 2 speechoppo, HbO, 4 region
# right STG
peak_R_STG_speechoppo_HbR <- vector()
d_prime_speechoppo_HbR <- vector()
R_STG_speechoppo_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 3, ]
peak_R_STG_speechoppo_HbR <- c(peak_R_STG_speechoppo_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speechoppo_HbR <- c(d_prime_speechoppo_HbR, d_prime_vs_HbO_peak_HbR$d_prime[1])
R_STG_speechoppo_HbR <- rbind(R_STG_speechoppo_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# left STG
peak_L_STG_speechoppo_HbR <- vector()
d_prime_speechoppo_HbR <- vector()
L_STG_speechoppo_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 4, ]
peak_L_STG_speechoppo_HbR <- c(peak_L_STG_speechoppo_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speechoppo_HbR <- c(d_prime_speechoppo_HbR , d_prime_vs_HbO_peak_HbR$d_prime[1])
L_STG_speechoppo_HbR <- rbind(L_STG_speechoppo_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# right cIFS
peak_R_cIFS_speechoppo_HbR <- vector()
d_prime_speechoppo_HbR <- vector()
R_cIFS_speechoppo_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 1, ]
peak_R_cIFS_speechoppo_HbR <- c(peak_R_cIFS_speechoppo_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speechoppo_HbR <- c(d_prime_speechoppo_HbR , d_prime_vs_HbO_peak_HbR$d_prime[1])
R_cIFS_speechoppo_HbR <- rbind(R_cIFS_speechoppo_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
# left cIFS
peak_L_cIFS_speechoppo_HbR <- vector()
d_prime_speechoppo_HbR <- vector()
L_cIFS_speechoppo_HbR <- vector()
for (subject_ID in c(1:14)){
d_prime_vs_HbO_peak_HbR <- d_prime_vs_HbO_peak[d_prime_vs_HbO_peak$HbO_HbR == 2 &
d_prime_vs_HbO_peak$SID == subject_ID &
d_prime_vs_HbO_peak$masker_configuration == 2 &
d_prime_vs_HbO_peak$roi_code == 2, ]
peak_L_cIFS_speechoppo_HbR <- c(peak_L_cIFS_speechoppo_HbR, abs(max(d_prime_vs_HbO_peak_HbR$predicted)))
d_prime_speechoppo_HbR <- c(d_prime_speechoppo_HbR , d_prime_vs_HbO_peak_HbR$d_prime[1])
L_cIFS_speechoppo_HbR <- rbind(L_cIFS_speechoppo_HbR, d_prime_vs_HbO_peak_HbR$predicted)
}
## save data for analysis
#trace data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/model only trace exp2', sep = ""))
write.csv(L_cIFS_speech_HbO, file = "L_cIFS_speech_HbO.csv")
write.csv(L_cIFS_speech_HbR, file = "L_cIFS_speech_HbR.csv")
write.csv(L_STG_speech_HbO, file = "L_STG_speech_HbO.csv")
write.csv(L_STG_speech_HbR, file = "L_STG_speech_HbR.csv")
write.csv(R_cIFS_speech_HbO, file = "R_cIFS_speech_HbO.csv")
write.csv(R_cIFS_speech_HbR, file = "R_cIFS_speech_HbR.csv")
write.csv(R_STG_speech_HbO, file = "R_STG_speech_HbO.csv")
write.csv(R_STG_speech_HbR, file = "R_STG_speech_HbR.csv")
write.csv(L_cIFS_speechoppo_HbO, file = "L_cIFS_speechoppo_HbO.csv")
write.csv(L_cIFS_speechoppo_HbR, file = "L_cIFS_speechoppo_HbR.csv")
write.csv(L_STG_speechoppo_HbO, file = "L_STG_speechoppo_HbO.csv")
write.csv(L_STG_speechoppo_HbR, file = "L_STG_speechoppo_HbR.csv")
write.csv(R_cIFS_speechoppo_HbO, file = "R_cIFS_speechoppo_HbO.csv")
write.csv(R_cIFS_speechoppo_HbR, file = "R_cIFS_speechoppo_HbR.csv")
write.csv(R_STG_speechoppo_HbO, file = "R_STG_speechoppo_HbO.csv")
write.csv(R_STG_speechoppo_HbR, file = "R_STG_speechoppo_HbR.csv")
# correlation data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/behavioral and hemodynamic responses data exp2', sep = ""))
write.csv(rbind(peak_R_STG_speech_HbO, d_prime_speech_HbO), file = "R_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbO, d_prime_speech_HbO), file = "L_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbO, d_prime_speech_HbO), file = "R_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbO, d_prime_speech_HbO), file = "L_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speech_HbR, d_prime_speech_HbR), file = "R_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbR, d_prime_speech_HbR), file = "L_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbR, d_prime_speech_HbR), file = "R_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbR, d_prime_speech_HbR), file = "L_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_cIFS_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_cIFS_speechoppo_HbR_peak_d.csv")
## save data for analysis
#trace data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/model only trace exp2', sep = ""))
write.csv(L_cIFS_speech_HbO, file = "L_cIFS_speech_HbO.csv")
write.csv(L_cIFS_speech_HbR, file = "L_cIFS_speech_HbR.csv")
write.csv(L_STG_speech_HbO, file = "L_STG_speech_HbO.csv")
write.csv(L_STG_speech_HbR, file = "L_STG_speech_HbR.csv")
write.csv(R_cIFS_speech_HbO, file = "R_cIFS_speech_HbO.csv")
write.csv(R_cIFS_speech_HbR, file = "R_cIFS_speech_HbR.csv")
write.csv(R_STG_speech_HbO, file = "R_STG_speech_HbO.csv")
write.csv(R_STG_speech_HbR, file = "R_STG_speech_HbR.csv")
write.csv(L_cIFS_speechoppo_HbO, file = "L_cIFS_speechoppo_HbO.csv")
write.csv(L_cIFS_speechoppo_HbR, file = "L_cIFS_speechoppo_HbR.csv")
write.csv(L_STG_speechoppo_HbO, file = "L_STG_speechoppo_HbO.csv")
write.csv(L_STG_speechoppo_HbR, file = "L_STG_speechoppo_HbR.csv")
write.csv(R_cIFS_speechoppo_HbO, file = "R_cIFS_speechoppo_HbO.csv")
write.csv(R_cIFS_speechoppo_HbR, file = "R_cIFS_speechoppo_HbR.csv")
write.csv(R_STG_speechoppo_HbO, file = "R_STG_speechoppo_HbO.csv")
write.csv(R_STG_speechoppo_HbR, file = "R_STG_speechoppo_HbR.csv")
# correlation data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/behavioral and hemodynamic responses data exp2', sep = ""))
write.csv(rbind(peak_R_STG_speech_HbO, d_prime_speech_HbO), file = "R_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbO, d_prime_speech_HbO), file = "L_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbO, d_prime_speech_HbO), file = "R_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbO, d_prime_speech_HbO), file = "L_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speech_HbR, d_prime_speech_HbR), file = "R_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbR, d_prime_speech_HbR), file = "L_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbR, d_prime_speech_HbR), file = "R_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbR, d_prime_speech_HbR), file = "L_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_cIFS_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_cIFS_speechoppo_HbR_peak_d.csv")
## save data for analysis
#trace data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/model only trace exp2', sep = ""))
write.csv(L_cIFS_speech_HbO, file = "L_cIFS_speech_HbO.csv")
write.csv(L_cIFS_speech_HbR, file = "L_cIFS_speech_HbR.csv")
write.csv(L_STG_speech_HbO, file = "L_STG_speech_HbO.csv")
write.csv(L_STG_speech_HbR, file = "L_STG_speech_HbR.csv")
write.csv(R_cIFS_speech_HbO, file = "R_cIFS_speech_HbO.csv")
write.csv(R_cIFS_speech_HbR, file = "R_cIFS_speech_HbR.csv")
write.csv(R_STG_speech_HbO, file = "R_STG_speech_HbO.csv")
write.csv(R_STG_speech_HbR, file = "R_STG_speech_HbR.csv")
write.csv(L_cIFS_speechoppo_HbO, file = "L_cIFS_speechoppo_HbO.csv")
write.csv(L_cIFS_speechoppo_HbR, file = "L_cIFS_speechoppo_HbR.csv")
write.csv(L_STG_speechoppo_HbO, file = "L_STG_speechoppo_HbO.csv")
write.csv(L_STG_speechoppo_HbR, file = "L_STG_speechoppo_HbR.csv")
write.csv(R_cIFS_speechoppo_HbO, file = "R_cIFS_speechoppo_HbO.csv")
write.csv(R_cIFS_speechoppo_HbR, file = "R_cIFS_speechoppo_HbR.csv")
write.csv(R_STG_speechoppo_HbO, file = "R_STG_speechoppo_HbO.csv")
write.csv(R_STG_speechoppo_HbR, file = "R_STG_speechoppo_HbR.csv")
# correlation data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/behavioral and hemodynamic responses data exp2', sep = ""))
write.csv(rbind(peak_R_STG_speech_HbO, d_prime_speech_HbO), file = "R_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbO, d_prime_speech_HbO), file = "L_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbO, d_prime_speech_HbO), file = "R_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbO, d_prime_speech_HbO), file = "L_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speech_HbR, d_prime_speech_HbR), file = "R_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbR, d_prime_speech_HbR), file = "L_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbR, d_prime_speech_HbR), file = "R_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbR, d_prime_speech_HbR), file = "L_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_cIFS_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_cIFS_speechoppo_HbR_peak_d.csv")
## save data for analysis
#trace data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/model only trace exp2', sep = ""))
write.csv(L_cIFS_speech_HbO, file = "L_cIFS_speech_HbO.csv")
write.csv(L_cIFS_speech_HbR, file = "L_cIFS_speech_HbR.csv")
write.csv(L_STG_speech_HbO, file = "L_STG_speech_HbO.csv")
write.csv(L_STG_speech_HbR, file = "L_STG_speech_HbR.csv")
write.csv(R_cIFS_speech_HbO, file = "R_cIFS_speech_HbO.csv")
write.csv(R_cIFS_speech_HbR, file = "R_cIFS_speech_HbR.csv")
write.csv(R_STG_speech_HbO, file = "R_STG_speech_HbO.csv")
write.csv(R_STG_speech_HbR, file = "R_STG_speech_HbR.csv")
write.csv(L_cIFS_speechoppo_HbO, file = "L_cIFS_speechoppo_HbO.csv")
write.csv(L_cIFS_speechoppo_HbR, file = "L_cIFS_speechoppo_HbR.csv")
write.csv(L_STG_speechoppo_HbO, file = "L_STG_speechoppo_HbO.csv")
write.csv(L_STG_speechoppo_HbR, file = "L_STG_speechoppo_HbR.csv")
write.csv(R_cIFS_speechoppo_HbO, file = "R_cIFS_speechoppo_HbO.csv")
write.csv(R_cIFS_speechoppo_HbR, file = "R_cIFS_speechoppo_HbR.csv")
write.csv(R_STG_speechoppo_HbO, file = "R_STG_speechoppo_HbO.csv")
write.csv(R_STG_speechoppo_HbR, file = "R_STG_speechoppo_HbR.csv")
# correlation data
setwd(paste(dirname(rstudioapi::getSourceEditorContext()$path), '/behavioral and hemodynamic responses data exp2', sep = ""))
write.csv(rbind(peak_R_STG_speech_HbO, d_prime_speech_HbO), file = "R_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbO, d_prime_speech_HbO), file = "L_STG_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbO, d_prime_speech_HbO), file = "R_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbO, d_prime_speech_HbO), file = "L_cIFS_speech_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_STG_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "R_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbO, d_prime_speechoppo_HbO), file = "L_cIFS_speechoppo_HbO_peak_d.csv")
write.csv(rbind(peak_R_STG_speech_HbR, d_prime_speech_HbR), file = "R_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speech_HbR, d_prime_speech_HbR), file = "L_STG_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speech_HbR, d_prime_speech_HbR), file = "R_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speech_HbR, d_prime_speech_HbR), file = "L_cIFS_speech_HbR_peak_d.csv")
write.csv(rbind(peak_R_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_STG_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_STG_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_R_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "R_cIFS_speechoppo_HbR_peak_d.csv")
write.csv(rbind(peak_L_cIFS_speechoppo_HbR, d_prime_speechoppo_HbR), file = "L_cIFS_speechoppo_HbR_peak_d.csv")
# Plot model prediction on top of the real data
# HbO
ggplot(df_LMEM_summary_HbO)+
aes(x = time, y = fnirs_data, color = masker_configuration)+
geom_ribbon(aes(ymin = fnirs_data - fnirs_data.se,
ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
facet_grid(. ~ roi_code)
# HbR
ggplot(df_LMEM_summary_HbR)+
aes(x = time, y = fnirs_data, color = masker_configuration)+
geom_ribbon(aes(ymin = fnirs_data - fnirs_data.se,
ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
facet_grid(. ~ roi_code)
# Plot model prediction on top of the real data
# HbO
ggplot(df_LMEM_summary_HbO)+
aes(x = time, y = fnirs_data, color = masker_configuration)+
geom_ribbon(aes(ymin = fnirs_data - fnirs_data.se,
ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
ggtitle("LMEM fits overlay with raw recordings (HbO)") +
facet_grid(. ~ roi_code)
# HbR
ggplot(df_LMEM_summary_HbR)+
aes(x = time, y = fnirs_data, color = masker_configuration)+
geom_ribbon(aes(ymin = fnirs_data - fnirs_data.se,
ymax = fnirs_data + fnirs_data.se,
fill = masker_configuration),
alpha = 0.5, color = NA)+
# actual data
geom_line(aes(y = fnirs_data, group = masker_configuration), size = 1.5)+
# model prediction
geom_line(aes(y = predicted, group = masker_configuration), color = "white", size = 1.5)+
geom_line(aes(y = predicted, group = masker_configuration), size = 0.75, linetype = "dashed")+
ylim(-1.6, 1.6) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.margin = margin(2,.5,2,.5, "cm")) +
ggtitle("LMEM fits overlay with raw recordings (HbR)") +
facet_grid(. ~ roi_code)
